[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome!",
    "section": "",
    "text": "First blog post. More to come. Watch this space."
  },
  {
    "objectID": "projects/the_india_project/ls_rs_questions/ls_rs_questions.html",
    "href": "projects/the_india_project/ls_rs_questions/ls_rs_questions.html",
    "title": "What are the MPs asking and answering?",
    "section": "",
    "text": "Extract and prepare a clean database of questions and answers asked in the Lok Sabha and Rajya Sabha sessions, India.\nPerform NLP analysis like NER, topic modeling, keyword extraction, relevance of answers to questions, and time-series analysis."
  },
  {
    "objectID": "projects/the_india_project/movies_india/movies_india.html",
    "href": "projects/the_india_project/movies_india/movies_india.html",
    "title": "Indian movies and gender inequality",
    "section": "",
    "text": "The lead male actor and the lead female actor are important roles in a movie. In mainstream Indian movies, it has been noticed that the lead male actor is often a lot older compared to the lead female actor, but the ages of the characters they play in the movie are comparable. In this project, I want to explore such biases in mainstream Indian cinema. As a starting point, I’ve scraped Wikipedia and other public sources and prepared a database of movies of a few leading male actors (heroes) in mainstream Indian cinema, along with the ages of the lead male actor and the lead female actor in each movie.\nLater, I want to look for patterns and differences in this across languages/regions, movie genres and over the years.\nSome questions to consider are:\n\nHow the age gap between the lead male actor and lead female actor age gap look like for various actors from across mainstream Indian cinema?\nHow has this changed over the years?\nHow does this compare across cinema from different regions?\nHow does the typical career of an actress compare with that of an actor?"
  },
  {
    "objectID": "projects/the_india_project/movies_india/movies_india.html#age-gap-between-lead-male-and-female-actors",
    "href": "projects/the_india_project/movies_india/movies_india.html#age-gap-between-lead-male-and-female-actors",
    "title": "Indian movies and gender inequality",
    "section": "Age gap between lead male and female actors",
    "text": "Age gap between lead male and female actors\n\n\nhero_names = [\n    'Aamir Khan', 'Mahesh Babu', 'Akshay Kumar'\n];\n\nviewof input = Inputs.select(hero_names, {value: 'Aamir Khan', label: 'Choose lead male actor'})\n\nfunction displayImage(option) {\n  return `<p><a href=\"hero_based_age_gap/${option}.png\" class=\"lightbox\" title=\"Resolution writing as part of the October 2022 (online) session on “Energy Security &amp; Health”.\"><img class=\"img-fluid figure-img\" src=\"hero_based_age_gap/${option}.png\" width=\"100%\"></img></a></p>`;\n}\n\n\nhtml`${displayImage(input)}`"
  },
  {
    "objectID": "projects/the_india_project/healthcare_india/healthcare_india.html",
    "href": "projects/the_india_project/healthcare_india/healthcare_india.html",
    "title": "How far is healthcare in (rural) India?",
    "section": "",
    "text": "If various PHCs, RMP centers, clinics and hospitals are considered, how far is healthcare for different rural areas of India? Is there public transport to the nearest center? What facilities are available?"
  },
  {
    "objectID": "projects/the_india_project/healthcare_india/healthcare_india.html#healthcare-access-and-caste",
    "href": "projects/the_india_project/healthcare_india/healthcare_india.html#healthcare-access-and-caste",
    "title": "How far is healthcare in (rural) India?",
    "section": "Healthcare access and caste",
    "text": "Healthcare access and caste\nHow is healthcare access to villages predominantly occupied by SCs and STs compared to the rest of the villages?"
  },
  {
    "objectID": "projects/the_india_project/dairy_india/dairy_india.html",
    "href": "projects/the_india_project/dairy_india/dairy_india.html",
    "title": "Making sense of India’s cattle through numbers",
    "section": "",
    "text": "Analyze numbers from the Livestock Census, NSS, dairy industry, meat production (and export), and the leather industry to depict the life (and death) of cattle and poultry in India. Write a story that encompasses the various aspects of an animal’s life and animal welfare, touching upon the lives of the people involved in these industries, and show that the dairy industry enables the meat industry."
  },
  {
    "objectID": "projects/the_india_project/car_prices_india/car_prices_india.html",
    "href": "projects/the_india_project/car_prices_india/car_prices_india.html",
    "title": "How affordable are cars with 6+ airbags?",
    "section": "",
    "text": "Approach: Scrape data off cardekho.com and analyze the results."
  },
  {
    "objectID": "projects/the_india_project/car_prices_india/car_prices_india.html#new-cars-market",
    "href": "projects/the_india_project/car_prices_india/car_prices_india.html#new-cars-market",
    "title": "How affordable are cars with 6+ airbags?",
    "section": "New cars market",
    "text": "New cars market"
  },
  {
    "objectID": "projects/the_india_project/car_prices_india/car_prices_india.html#used-cars-market",
    "href": "projects/the_india_project/car_prices_india/car_prices_india.html#used-cars-market",
    "title": "How affordable are cars with 6+ airbags?",
    "section": "Used cars market",
    "text": "Used cars market"
  },
  {
    "objectID": "projects/the_india_project/the_india_project.html",
    "href": "projects/the_india_project/the_india_project.html",
    "title": "The India Project",
    "section": "",
    "text": "Use data to understand and unpack various aspects of India."
  },
  {
    "objectID": "projects/climate_change/visualizing_change/visualizing_change_resilience.html",
    "href": "projects/climate_change/visualizing_change/visualizing_change_resilience.html",
    "title": "Visualizing climate change and resilience",
    "section": "",
    "text": "Born from an ADB challenge.\nWhat: Interactive map of disaster (floods, earthquakes etc.) locations in countries over the years, with (a) on-click display of satellite images from the locations before, during and after the disaster, (b) details of destruction caused - lives lost, people displaced, monetary loss.\nHow: Combine satellite images from Sentinel Hub, disaster data from Resource Watch and displacement data from IDMC."
  },
  {
    "objectID": "projects/climate_change/climate_change.html",
    "href": "projects/climate_change/climate_change.html",
    "title": "Climate Change",
    "section": "",
    "text": "Use data to understand climate change."
  },
  {
    "objectID": "projects/the_vienna_project/public_transport/public_transport.html",
    "href": "projects/the_vienna_project/public_transport/public_transport.html",
    "title": "Is Vienna’s public transport really the best?",
    "section": "",
    "text": "Come up with a framework that incorporates different metrics of evaluating public transport - for instance, connectivity, reliability, robustness, cost-effectiveness, last-mile connectivity, and use them to analyze the “goodness” of public transport in Vienna and other cities around the world. complex systems"
  },
  {
    "objectID": "projects/the_vienna_project/the_vienna_project.html",
    "href": "projects/the_vienna_project/the_vienna_project.html",
    "title": "The Vienna Project",
    "section": "",
    "text": "Use data to understand Vienna and Austria."
  },
  {
    "objectID": "projects/visualizations/visualizations.html",
    "href": "projects/visualizations/visualizations.html",
    "title": "Visualizations",
    "section": "",
    "text": "Various explorations of visualizations - on real maps, in abstract worlds, on 2D plots and so on."
  },
  {
    "objectID": "projects/visualizations/visualizations.html#what-happens-after-a-concert",
    "href": "projects/visualizations/visualizations.html#what-happens-after-a-concert",
    "title": "Visualizations",
    "section": "What happens after a concert?",
    "text": "What happens after a concert?\nVisualization of concert-goers’ movements after a concert. A simple model that considers each concert-goer to have various propensities for possible behaviours like hunger, drinking, sleep, with agents moving on a map of Vienna."
  },
  {
    "objectID": "projects/visualizations/concert_dispersal/concert_dispersal.html",
    "href": "projects/visualizations/concert_dispersal/concert_dispersal.html",
    "title": "What happens after a concert?",
    "section": "",
    "text": "Visualization of concert-goers’ movements after a concert. A simple model that considers each concert-goer to have various propensities for possible behaviours like hunger, drinking, sleep, with agents moving on a map of Vienna."
  },
  {
    "objectID": "projects/cricket_analytics/cricket_analytics.html",
    "href": "projects/cricket_analytics/cricket_analytics.html",
    "title": "Cricket Analytics",
    "section": "",
    "text": "Tackle various questions like:\n\nHow crucial is toss in winning a match? Does this depend on particular aspects of the match like day vs night, venue etc.\nAre umpires biased as revealed by DRS data?\nWhat opener strategies exist and how do they impact match outcomes?\nWhat finisher strategies exist and how do they impact match outcomes?\nWhat is the impact-per-dollar of different players? Who are the players that have had more impact-per-dollar than their peers in a similar price class?\nHow can one extract the shot played from ball-by-ball commentary?\nHow good is ESPNCricinfo’s score prediction and win probability?\nWho are the players that contributed more to their teams increases in win probability?"
  },
  {
    "objectID": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html",
    "href": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html",
    "title": "Batter strategies and their impacts in the IPL",
    "section": "",
    "text": "Note\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\nThe role of batters in cricket is to make as many runs as possible for their team, and sometimes, especially in test cricket, to also play as many balls as possible. In T20 cricket, due to the short format, batters can take more risks than in the other longer formats, and hence an increasing emphasis is on scoring as many runs as possible in as little balls as possible. Of course, this doesn’t automatically imply that batters always take risks as it can mean that the team runs out of specialized batters with many overs still left to play. Batters take more risks than in ODIs or tests, thereby allowing quicker scoring, while also spacing out these risks appropriately, to be able to playing out the allotted 20 overs. T20 cricket has also led to very specialized roles for batters and a lot of emphasis is given to ensuring that the best hitters get enough balls to showcase their skills.\nIn the last 14 years since IPL began in 2008, batters in the debatably world’s premier T20 tournament have employed various strategies to make these quick runs. Depending on whether the batter is an opener, a middle-order batter or a finisher, different teams and batters have developed diverse templates. In this project, I investigated individual batter templates and strategies, and their impact on the team’s winning consequences."
  },
  {
    "objectID": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html#the-trade-off-between-strike-rate-and-risk",
    "href": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html#the-trade-off-between-strike-rate-and-risk",
    "title": "Batter strategies and their impacts in the IPL",
    "section": "The trade-off between strike-rate and risk",
    "text": "The trade-off between strike-rate and risk\nThe trade-off between risk and strike-rate takes the center stage in individual batter strategies. A batter willing to take more risk has access to a wider range of shots for each ball, often diverging employing shots that diverge from the prescribed shots in the coaching manual. Some batters like Andre Russell score quick runs while taking more risks. This increases their chance of getting out each ball, and thereby they end up playing fewer balls. Such finishers usually come later in the innings when there aren’t a lot of balls left. Some teams like the Kolkata Knight Riders have often sent out “pinch hitters” like Sunil Narine earlier in the innings, often as an opener. On the other hand, batters like AB de Villiers and Jos Buttler take switch gears between low and moderate risk. But even at the highest risk, the emphasis is slightly more on surviving to play another ball than is for batters like Andre Russell. More conventional batters like Mike Hussey, Tendulkar and Kallis rely heavily on a risk-minimal approach unless the situation strongly demands otherwise.\n \nThe figure above illustrates some aspects of this trade-off. Keeping tail-enders aside, notice that batters are spread on the diagonal from the top left to the bottom right. Classical players like Mike Hussey, Kallis, Tendulkar and Gaikwad are in the top left quarter - they play more balls than most others and hit at a lower strike-rate than most others. As we move through the large group of unnamed batters marked in blue, we find another group of players like Maxwell, Pollard and Hardik Pandya who play fewer balls than most others and hit at a higher rate than most others. Some notable exceptions are batters who seem to escape this trade-off, or perhaps push it to its limits - KL Rahul, Jos Buttler, AB de Villiers, Warner, Gayle, Russell and the like.\nOpeners play more balls than the other batter types while also exhibiting a wide range of strike-rates. For example, Gaikwad’s average strike-rate is just short of 100 and Jos Buttler’s is around 135. Gaikwad, however, typically plays a few more balls than Jos Buttler. How do these different strategies impact the match outcome?"
  },
  {
    "objectID": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html#strategy-differences-between-winning-and-losing",
    "href": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html#strategy-differences-between-winning-and-losing",
    "title": "Batter strategies and their impacts in the IPL",
    "section": "Strategy differences between winning and losing",
    "text": "Strategy differences between winning and losing\nSeparating the innings played by each batter into two groups based on whether their team won or lost the match, we can measure how different the batters strategies are in the two groups.\nInstead of measuring the difference between mean strike-rate in wins and mean strike-rate in losses for each batter, we use percentile scores. The mean percentile score from strike-rates in wins (losses) tells us overall in all innings, how often the batter scores slower than they typically score at in wins (losses). The difference between these two values (wins minus losses) quantifies the typical increase (if positive) or decrease (if negative) of strike-rates from losses to wins. A similar logic applies for balls faced - the difference between mean percentile scores in wins and losses quantifies the typical increase (if positive) or decrease (if negative) in the number of balls faced from losses to wins.\n \n\n\nHow is the calculation done? Percentile scores transform data into values between 0 and 1, making comparisons across datasets with different ranges easier. The percentile score of a particular value is the fraction of data that is smaller than the value. We do this for each batter separately for both strike-rates and balls faced. The percentile score of a particular strike-rate (in some particular innings) of a batter tells us how often the batter has scored slower than in that innings. So for the batter’s IPL career-best strike-rate, the percentile score would be 1 (signifying that the batter plays slower in all other innings), and for the batter’s IPL career-worst strike rate, the percentile score would be 0."
  },
  {
    "objectID": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html#interactive-plots",
    "href": "projects/cricket_analytics/ipl_batters_strategies/ipl_batters_strategies.html#interactive-plots",
    "title": "Batter strategies and their impacts in the IPL",
    "section": "Interactive Plots",
    "text": "Interactive Plots\n\ndata = FileAttachment(\"data/ipl_batter_SR_balls.json\").json();\n\n\n\n\n\n\n\nall_batter_names = data.map(row => row.Name)\n\n\n\n\n\n\nHere is an interactive version that presents these features of strike-rates, balls faced and their differences between wins and losses. You can select a subset of batting positions on the right to limit display to those positions. Hovering over a point would reveal the batter information, along with their average performance in wins and losses. When you hover, two small plots pop up on the right edge that reveal how strike-rates and balls faced differ between wins and losses in all individual innings of the batter. After hovering, you can click to label the batter even when you move the mouse away from the point.\n\n\n/* ----------------------------------------------------------\nInteractive plot showing average strike-rates and balls faced\n-------------------------------------------------------------*/\n{\n  // Setting up the overall chart dimensions\n  const margin = ({top: 20, right: 150, bottom: 50, left: 60})\n  const visWidth = 450\n  const visHeight = 450\n\n  var textColor = d3.select(\"p\").style(\"color\")\n  const greyTextColor = \"#212529\"\n\n  // Setting up x and y scales to map from data values to pixel values\n  const extentSR = [d3.min(data, function(d){return Math.min.apply(Math, [d.AvSRWin, d.AvSRLoss])}),\n                d3.max(data, function(d){return Math.max.apply(Math, [d.AvSRWin, d.AvSRLoss])})]; \n\n  const extentBalls = [d3.min(data, function(d){return Math.min.apply(Math, [d.AvBallsWin, d.AvBallsLoss])}),\n                d3.max(data, function(d){return Math.max.apply(Math, [d.AvBallsWin, d.AvBallsLoss])})]; \n\n  // Linear x-scale, domain and range set\n  const x = d3.scaleLinear()\n        .domain(extentSR).nice()\n        .range([0, visWidth]);\n\n  // Linear y-scale, domain and range set\n  const y = d3.scaleLinear()\n        .domain(extentBalls).nice()\n        .range([visHeight, 0]);\n\n  // Creating the x-axis and the y-axis, and their labels\n  \n  // Creating the x-axis\n  const xAxis = (g, scale, label) =>\n    g.attr(\"transform\", `translate(0, ${visHeight})`)\n        // add axis\n        .call(d3.axisBottom(scale))\n      // add label\n      .append(\"text\")\n        .attr(\"x\", visWidth / 2)\n        .attr(\"y\", margin.bottom-5)\n        .attr(\"fill\", textColor)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", \"18\")\n        .text(label)\n\n  // Creating the y-axis\n  const yAxis = (g, scale, label) => \n    // add axis\n    g.call(d3.axisLeft(scale))\n      // add label\n      .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"x\", -visHeight/2)\n        .attr(\"y\", -margin.left+20)\n        .attr(\"fill\", textColor)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", \"18\")\n        .text(label)\n\n  // Creating the svg inside the visualization margins of the chart: this is where things can be drawn\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", visWidth + margin.left + margin.right)\n      .attr(\"height\", visHeight + margin.top + margin.bottom);\n      \n  /* svg.append(\"rect\")\n    .attr(\"width\", \"100%\")\n    .attr(\"height\", \"100%\")\n    .attr(\"fill\", \"#ffffff\"); */\n\n  // Creating a main group to add things to visualize\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n  // Attach axes to the main group\n  g.append(\"g\").call(xAxis, x, \"Average strike-rate in innings →\");\n  g.append(\"g\").call(yAxis, y, \"Average no. of balls faced in innings →\");\n  // Change axes tick label fontsize\n  g.selectAll(\".tick text\")\n    .attr(\"font-size\", 15)\n    .attr(\"font-family\", \"roboto\")\n\n  // Drawing grid lines\n  const grid = g.append('g');\n  \n  grid.append('rect')\n    .attr('width', visWidth)\n    .attr('height', visHeight)\n    .attr('fill', 'white');\n\n  let yLines = grid.append('g')\n    .selectAll('line');\n\n  let xLines = grid.append('g')\n    .selectAll('line');\n\n  function drawGridLines(x, y) {\n    yLines = yLines.data(y.ticks())\n      .join('line')\n        .attr('stroke', '#d3d3d3')\n        .attr('x1', 0)\n        .attr('x2', visWidth)\n        .attr('y1', d => 0.5 + y(d))\n        .attr('y2', d => 0.5 + y(d));\n\n    xLines = xLines.data(x.ticks())\n      .join('line')\n        .attr('stroke', '#d3d3d3')\n        .attr('x1', d => 0.5 + x(d))\n        .attr('x2', d => 0.5 + x(d))\n        .attr('y1', d => 0)\n        .attr('y2', d => visHeight);\n  }\n\n  // Allows to re-draw grid lines whenever necessary: like zooming in or updating the domains of the x and y axes\n  drawGridLines(x, y);\n\n  // Setting up a clipPath to hide data points outside of the visualization area \n  g.append('clipPath')\n      .attr('id', 'border')\n    .append('rect')\n      .attr('width', visWidth)\n      .attr('height', visHeight);\n\n  g.append('rect')\n      .attr('width', visWidth)\n      .attr('height', visHeight)\n      .attr(\"stroke\", \"#000000\")\n      .style(\"stroke-width\", 1)\n      .attr('fill', 'none');\n\n  // Setting up a group containing the base scatter points\n  const baseCirclesGroup = g.append('g')\n      .attr('clip-path', 'url(#border)');\n\n  // Setting up a group containing the hover graphic elements\n  const hoverElementsGroup = g.append('g')\n      .attr('clip-path', 'url(#border)');\n\n  // Creating a tooltip that is hidden by default\n  const tooltip = g.append(\"g\")\n      .attr(\"id\", \"tp\")\n      .attr(\"visibility\", \"hidden\");\n\n  // Creating the x-axis\n  const xAxisSide = (g, scale) =>\n    g.attr(\"transform\", `translate(0, 100)`)\n        // add axis\n        .call(d3.axisBottom(scale).ticks(10));\n        // .call(g => g.select(\".domain\").remove());\n\n  // Creating the y-axis\n  const yAxisSide = (g, scale) => \n    // add axis\n    g.call(d3.axisLeft(scale).ticks(10));\n    //.call(g => g.select(\".domain\").remove());\n\n  const sideAxisX = margin.left + visWidth + 30\n  const sideAxisY = margin.top + 120\n\n  var sideAxisGroupTop = svg.append(\"g\")\n      .attr(\"class\", \"side_axis\")\n      .attr(\"transform\", `translate(${sideAxisX}, ${sideAxisY})`);\n\n  sideAxisGroupTop.append('rect')\n      .attr('width', 100)\n      .attr('height', 100)\n      .attr(\"stroke\", \"#000000\")\n      .style(\"stroke-width\", 1)\n      .attr('fill', 'none')\n      .attr(\"visibility\", \"hidden\");\n\n  const sideAxisYAdded = sideAxisY + 120\n\n  var sideAxisGroupBottom = svg.append(\"g\")\n      .attr(\"class\", \"side_axis\")\n      .attr(\"transform\", `translate(${sideAxisX}, ${sideAxisYAdded})`);\n\n  sideAxisGroupBottom.append('rect')\n      .attr('width', 100)\n      .attr('height', 100)\n      .attr(\"stroke\", \"#000000\")\n      .style(\"stroke-width\", 1)\n      .attr('fill', 'none')\n      .attr(\"visibility\", \"hidden\");\n\n  var all_SR = []\n  var all_balls = []\n  d3.range(data.length).forEach(function(xx, i) {\n    all_SR = d3.merge([all_SR, data[xx].SR])\n    all_balls = d3.merge([all_balls, data[xx].Balls]) \n  });\n  const minSR = d3.min(all_SR)\n  const maxSR = d3.quantile(all_SR, 0.99)\n  const minBalls = d3.min(all_balls)\n  const maxBalls = d3.max(all_balls)\n\n  const xSide = d3.scaleLinear()\n          .domain([minSR, maxSR])\n          .range([0, 100]);\n\n  // Linear y-scale, domain and range set\n  const ySide = d3.scaleLinear()\n        .domain([minBalls, maxBalls])\n        .range([100, 0]);\n\n  // Setting up a group containing the base scatter points\n  const sideCirclesGroupTop = sideAxisGroupTop.append('g');\n  const sideCirclesGroupBottom = sideAxisGroupBottom.append('g');\n\n  // Setting up some values before starting to plot\n  const baseRadius = 5\n  const BattingPositions = [\"Openers\", \"Middle-order\", \"Finishers\", \"Tail-enders\"]\n  const battingPositionColor = d3.scaleOrdinal()\n    .domain(BattingPositions)\n    .range(d3.schemeCategory10);\n\n  // Drawing the base scatter points by attaching it to the data\n  function drawPoints(in_data) {\n\n    const meanBalls = d3.mean(in_data, function(d) {return d.AvBalls});\n    var xMin = x.domain()[0];\n    var xMax = x.domain()[1];\n\n    const meanSR = d3.mean(in_data, function(d) {return d.AvSR});\n    var yMin = y.domain()[0];\n    var yMax = y.domain()[1];\n\n    // Select all circles in the group and append a data point to each\n    const baseCircles = baseCirclesGroup.selectAll('circle')\n      .data(in_data)\n      .join('circle')\n        // draw points\n        .attr(\"cx\", d => x(d.AvSR))\n        .attr(\"cy\", d => y(d.AvBalls))\n        .attr(\"fill\", d =>  battingPositionColor(d.BattingPosition))\n        .attr(\"r\", baseRadius)\n        .attr('stroke', \"none\")\n        .attr('stroke-width', 1)\n        .attr('opacity', 0.5)\n        // Interactive functions:\n        .on(\"mouseenter\", mouseEnter)\n        .on(\"mouseleave\", mouseLeave)\n        .on(\"click\", clicked);\n\n    // Adding a horizontal line\n    g.append('line')\n      .attr(\"id\", \"mean_balls\")\n      .attr(\"x1\", x(xMin))\n      .attr(\"y1\", y(meanBalls))\n      .attr(\"x2\", x(xMax))\n      .attr(\"y2\", y(meanBalls))\n      .style(\"stroke\", \"red\");\n\n    // Adding a vertical line\n    g.append('line')\n      .attr(\"id\", \"mean_sr\")\n      .attr(\"x1\", x(meanSR))\n      .attr(\"y1\", y(yMin))\n      .attr(\"x2\", x(meanSR))\n      .attr(\"y2\", y(yMax))\n      .style(\"stroke\", \"red\");\n\n  }\n\n  // Function to draw equi-run lines, given an array of runs\n  var line = d3.line()\n  var SR_linspace\n  function drawEquiRunLines(eqrs) {\n    SR_linspace = d3.ticks(x.domain()[0], x.domain()[1], 1000);    \n    var balls_eqr\n    var eqr_points\n    // Equi-run lines\n    for (let j = 0; j < eqrs.length; j++) { \n      balls_eqr = new Array();\n      eqr_points = new Array();\n      for (let i = 0; i < SR_linspace.length; i++) { \n        balls_eqr.push(eqrs[j]*100/SR_linspace[i]);\n        if (balls_eqr[i]>=y.domain()[0] && balls_eqr[i]<=y.domain()[1]) {\n          eqr_points.push([x(SR_linspace[i]), y(balls_eqr[i])]);\n        }\n        \n      }\n\n      g.append('path')\n        .attr(\"class\", \"main_eqr_lines\")\n        .attr('d', line(eqr_points))\n        .attr('stroke', '#a3a3a3')\n        .style(\"stroke-dasharray\", (\"10,3\"))\n        .attr('fill', 'none');\n\n      // Labeling the equi-run lines on the right-side of the plot\n      g.append(\"text\")\n        .attr(\"class\", \"main_eqr_run_labels\")\n        .attr(\"dx\", \"0.5em\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", 15)\n        .attr(\"fill\", textColor)\n        .attr(\"y\", y(eqrs[j]*100/(x.domain()[1]))) // offset it from the edge of the rectangle\n        .attr(\"x\", x(x.domain()[1])) // offset it from the edge of the rectangle\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d3.format(\".0f\")(eqrs[j])+\" runs\");\n    }\n  }\n\n  // Calling function to draw equi-run lines\n  drawEquiRunLines([10, 20, 30, 40, 50])\n\n  // Calling function to draw the base scatter plot on the given axes\n  drawPoints(data)\n\n  function dragstarted() {\n    d3.select(this).attr(\"stroke\", \"black\");\n  }\n\n  function dragged(event, d) {\n    d3.select(this).raise().attr(\"cx\", d.x = event.x).attr(\"cy\", d.y = event.y);\n  }\n\n  function dragended() {\n    d3.select(this).attr(\"stroke\", null);\n  }\n\n  var drag = d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n\n  // Track which batting-positions are selected\n  const highlighted = new Map(data.map(d => [d, true]));\n\n  // Function to handle mouse enter events\n  function mouseEnter(event, d, i) {\n    \n    // Remove labeling of highlighted labels, and equi-run lines\n    g.selectAll(\".highlighted_labels\").remove()\n    g.selectAll(\".main_eqr_lines\").attr(\"visibility\", \"hidden\");\n    g.selectAll(\".main_eqr_run_labels\").attr(\"visibility\", \"hidden\");\n\n    // y.domain([70,100])\n\n    // Define the arrowhead marker variables\n    const markerBoxWidth = 10;\n    const markerBoxHeight = 10;\n    const refX = markerBoxWidth / 2;\n    const refY = markerBoxHeight / 2;\n    const markerWidth = markerBoxWidth / 2;\n    const markerHeight = markerBoxHeight / 2;\n    const arrowPoints = [[0, 0], [0, 10], [10, 5]];\n\n    // Add the arrowhead marker definition to the svg element\n    svg\n      .append('defs')\n      .append('marker')\n        .attr('id', 'arrow')\n        .attr('viewBox', [0, 0, markerBoxWidth, markerBoxHeight])\n        .attr('refX', refX)\n        .attr('refY', refY)\n        .attr('markerWidth', markerBoxWidth)\n        .attr('markerHeight', markerBoxHeight)\n        .attr('orient', 'auto-start-reverse')\n      .append('path')\n        .attr('d', d3.line()(arrowPoints))\n        .attr('stroke', 'black');\n\n    // Change opacity of all scatter points on hover\n    baseCirclesGroup.selectAll('circle')\n      .attr(\"stroke\", \"none\")\n      .attr(\"opacity\", 0.75)\n      .attr(\"fill\", \"#d3d3d3\");\n\n    var eqrs = [d.AvBallsLoss*d.AvSRLoss/100, d.AvBalls*d.AvSR/100, d.AvBallsWin*d.AvSRWin/100]\n    var loss_runs_positions = [\"hanging\", \"middle\", \"bottom\"]\n    var balls_eqr\n    var eqr_points\n    // Equi-run lines\n    for (let j = 0; j < eqrs.length; j++) { \n      balls_eqr = new Array();\n      eqr_points = new Array();\n      for (let i = 0; i < SR_linspace.length; i++) { \n        balls_eqr.push(eqrs[j]*100/SR_linspace[i]);\n        if (balls_eqr[i]>=y.domain()[0] && balls_eqr[i]<=y.domain()[1]) {\n          eqr_points.push([x(SR_linspace[i]), y(balls_eqr[i])]);\n        } \n      }\n      hoverElementsGroup.append('path')\n        .attr(\"class\", \"hover_eqr_lines\")\n        .attr(\"pointer-events\", \"none\")\n        .attr('d', line(eqr_points))\n        .attr('stroke', '#a3a3a3')\n        .style(\"stroke-dasharray\", (\"10,3\"))\n        .attr('fill', 'none');\n\n      if (j>0) {\n        if (Math.round(eqrs[j])==Math.round(eqrs[j-1])) {\n          continue;\n        }\n      }\n\n      g.append(\"text\")\n        .attr(\"class\", \"loss_runs\")\n        .attr(\"dx\", \"0.5em\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", 15)\n        .attr(\"fill\", greyTextColor)\n        .attr(\"y\", y(eqrs[j]*100/(x.domain()[1]))) // offset it from the edge of the rectangle\n        .attr(\"x\", x(x.domain()[1])-60) // offset it from the edge of the rectangle\n        .attr(\"dominant-baseline\", function(){ \n          if ((eqrs[2]>eqrs[0] && j==0) || (eqrs[2]<eqrs[0] && j==2)) {\n            return \"hanging\"\n          }\n          if ((eqrs[2]>eqrs[0] && j==2) || (eqrs[2]<eqrs[0] && j==0)) {\n            return \"bottom\"\n          }\n          if (j==1) {\n            return \"middle\"\n          }\n        })\n        .text(d3.format(\".0f\")(eqrs[j])+\" runs\");\n    }\n\n    hoverElementsGroup.append(\"circle\")\n        .attr(\"id\", \"win_sr_circle\")\n        .attr(\"pointer-events\", \"none\")\n        .attr(\"cx\", x(d.AvSRWin))\n        .attr(\"cy\", y(d.AvBallsWin))\n        .attr(\"fill\", \"none\")\n        .attr(\"r\", 8)\n        .attr('stroke', \"#000000\")\n        .attr('stroke-width', 1)\n        .attr('opacity', 1);\n\n    hoverElementsGroup.append('line')\n      .style('stroke', 'black')\n      .attr(\"id\", \"loss_win\")\n      .attr(\"pointer-events\", \"none\")\n      .attr('marker-end', 'url(#arrow)')\n      .attr(\"x1\", x(d.AvSRLoss))\n      .attr(\"y1\", y(d.AvBallsLoss))\n      .attr(\"x2\", x(d.AvSRWin))\n      .attr(\"y2\", y(d.AvBallsWin));\n\n    hoverElementsGroup.append(\"circle\")\n        .attr(\"id\", \"loss_sr_circle\")\n        .attr(\"pointer-events\", \"none\")\n        .attr(\"cx\", x(d.AvSRLoss))\n        .attr(\"cy\", y(d.AvBallsLoss))\n        .attr(\"fill\", \"#000000\")\n        .attr(\"r\", 5)\n        .attr('stroke', \"#ffffff\")\n        .attr('stroke-width', 1)\n        .attr('opacity', 1);\n\n    hoverElementsGroup.append(\"text\")\n      .attr(\"id\", \"loss_label\")\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"dy\", \"-1em\")\n      .attr(\"dx\", d.AvSRWin>d.AvSRLoss? \"1em\" : \"-1em\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      //.attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", greyTextColor)\n      .attr(\"y\", y(d.AvBallsLoss)) // offset it from the edge of the rectangle\n      .attr(\"x\", x(d.AvSRLoss)) // offset it from the edge of the rectangle\n      .attr(\"dominant-baseline\", \"middle\")\n      .attr(\"text-anchor\", d.AvSRWin>d.AvSRLoss? \"end\" : \"start\")\n      .text(\"Loss\");\n\n    hoverElementsGroup.append(\"text\")\n      .attr(\"id\", \"win_label\")\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"dy\", \"-1em\")\n      .attr(\"dx\", d.AvSRWin>d.AvSRLoss? \"1em\" : \"-1em\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      // .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", greyTextColor)\n      .attr(\"y\", y(d.AvBallsWin)) // offset it from the edge of the rectangle\n      .attr(\"x\", x(d.AvSRWin)) // offset it from the edge of the rectangle\n      .attr(\"dominant-baseline\", \"middle\")\n      .attr(\"text-anchor\", d.AvSRWin>d.AvSRLoss? \"end\" : \"start\")\n      .text(\"Win\");\n\n    tooltip.select(\"#tp\")\n      .raise();\n\n    hoverElementsGroup.append(\"text\")\n    .attr(\"pointer-events\", \"none\")\n      .attr(\"id\", \"av_label\")\n      .attr(\"dy\", \"-1.2em\")\n      .attr(\"dx\", \"-0.5em\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      // .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", greyTextColor)\n      .attr(\"y\", y(d.AvBalls)) // offset it from the edge of the rectangle\n      .attr(\"x\", x(d.AvSR)) // offset it from the edge of the rectangle\n      .attr(\"dominant-baseline\", \"bottom\")\n      .text(\"All\");\n\n    // tooltipText.html(d.Name);\n    tooltip.append(\"text\")\n      .attr(\"dy\", \"0em\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 20)\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", greyTextColor)\n      .attr(\"dominant-baseline\", \"hanging\")\n      .text(d.Name);\n\n    var diff_sr = d.AvSRWin - d.AvSRLoss\n    tooltip.append(\"text\")\n      .attr(\"dy\", \"1.1em\") // you can vary how far apart it shows up\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 18)\n      .attr(\"dominant-baseline\", \"hanging\")\n      .text(\"SR: \"+d3.format(\".1f\")(d.AvSR))\n      .attr(\"fill\", greyTextColor)\n      .append(\"tspan\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", 15)\n        .attr(\"fill\", greyTextColor)\n        .attr(\"dominant-baseline\", \"hanging\")\n        .text(diff_sr>0? \" +\"+d3.format(\".0f\")(diff_sr): \" \"+d3.format(\".0f\")(diff_sr))\n        .attr(\"fill\", diff_sr>0? \"green\": \"red\");\n\n    var diff_balls = d.AvBallsWin - d.AvBallsLoss\n\n    tooltip.append(\"text\")\n      .attr(\"dy\", \"2.1em\") // you can vary how far apart it shows up\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 18)\n      .attr(\"fill\", greyTextColor)\n      .attr(\"dominant-baseline\", \"hanging\")\n      .text(\"Balls: \"+d3.format(\".0f\")(d.AvBalls))\n      .append(\"tspan\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", 15)\n        .attr(\"fill\", greyTextColor)\n        .attr(\"dominant-baseline\", \"hanging\")\n        .text(diff_balls>0? \" +\"+d3.format(\".0f\")(diff_balls): \" \"+d3.format(\".0f\")(diff_balls))\n        .attr(\"fill\", diff_balls>0? \"green\": \"red\");\n    \n    d3.select(this)\n        .attr(\"r\", baseRadius * 3)\n        .attr('opacity', 1)\n        .raise()\n        .attr(\"fill\", battingPositionColor(d.BattingPosition));\n\n    const xPos = 0.7*x(x.domain()[1])\n    const yPos = 0.1*y(y.domain()[0])\n    tooltip\n      .attr(\"transform\", `translate(${xPos},${yPos})`)\n      .attr(\"visibility\", \"visible\");\n\n    // Add a side axis group for innings_points\n    // Linear x-scale, domain and range set\n    // xSide.domain(d3.extent(d.SR)).nice();\n    // ySide.domain(d3.extent(d.Balls)).nice();\n\n    // Making side axis group visible\n    sideAxisGroupTop.attr(\"visibility\", \"visible\");\n\n    // Attach axes to the main group\n    sideAxisGroupTop.append(\"g\").call(xAxisSide, xSide);\n    sideAxisGroupTop.append(\"g\").call(yAxisSide, ySide);\n\n    sideAxisGroupTop.selectAll(\".tick line\")\n      .attr(\"visibility\", \"hidden\");\n    \n    sideAxisGroupTop.selectAll(\"text\").remove()\n\n    sideAxisGroupBottom.attr(\"visibility\", \"visible\");\n\n    // Attach axes to the main group\n    sideAxisGroupBottom.append(\"g\").call(xAxisSide, xSide);\n    sideAxisGroupBottom.append(\"g\").call(yAxisSide, ySide);\n\n    sideAxisGroupBottom.selectAll(\".tick line\")\n      .attr(\"visibility\", \"hidden\");\n    \n    sideAxisGroupBottom.selectAll(\"text\").remove()\n\n    sideAxisGroupBottom.append(\"text\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      .attr(\"fill\", textColor)\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"dy\", -5)\n      .attr(\"dx\", 100)\n      .attr(\"dominant-baseline\", \"hanging\")\n      .attr(\"text-anchor\", \"end\")\n      .text(\"Wins\");\n\n    sideAxisGroupTop.append(\"text\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      .attr(\"fill\", textColor)\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"dy\", -5)\n      .attr(\"dx\", 100)\n      .attr(\"dominant-baseline\", \"hanging\")\n      .attr(\"text-anchor\", \"end\")\n      .text(\"Losses\");\n\n    sideAxisGroupBottom.append(\"text\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      .attr(\"fill\", textColor)\n      .attr(\"dy\", 110)\n      .attr(\"dx\", -3)\n      .attr(\"dominant-baseline\", \"hanging\")\n      .text(minSR);\n\n    sideAxisGroupBottom.append(\"text\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      .attr(\"fill\", textColor)\n      .attr(\"dy\", 110)\n      .attr(\"dx\", 90)\n      .attr(\"dominant-baseline\", \"hanging\")\n      .text(maxSR);\n\n    sideAxisGroupBottom.append(\"text\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      .attr(\"fill\", textColor)\n      .attr(\"dy\", 0)\n      .attr(\"dx\", -10)\n      .attr(\"dominant-baseline\", \"middle\")\n      .attr(\"text-anchor\", \"end\")\n      .text(maxBalls);\n\n    sideAxisGroupBottom.append(\"text\")\n      .attr(\"font-family\", \"roboto\")\n      .attr(\"font-size\", 15)\n      .attr(\"fill\", textColor)\n      .attr(\"dy\", 100)\n      .attr(\"dx\", -10)\n      .attr(\"dominant-baseline\", \"middle\")\n      .attr(\"text-anchor\", \"end\")\n      .text(minBalls);\n\n    d3.range(d.SR.length).forEach(function(xx, i) {\n      sideCirclesGroupTop.append('circle')\n        .attr(\"class\", \"innings_points\")\n        // .attr('clip-path', 'url(#border)')\n        .attr(\"pointer-events\", \"none\")\n        .attr(\"cx\", xSide(d.SR[xx]))\n        .attr(\"cy\", ySide(d.Balls[xx]))\n        .attr(\"r\", 6)\n        .attr(\"opacity\", 0.5)\n        .style(\"fill\", \"#b3b3b3\")\n        .style(\"stroke\", \"none\");\n\n      sideCirclesGroupBottom.append('circle')\n        .attr(\"class\", \"innings_points\")\n        // .attr('clip-path', 'url(#border)')\n        .attr(\"pointer-events\", \"none\")\n        .attr(\"cx\", xSide(d.SR[xx]))\n        .attr(\"cy\", ySide(d.Balls[xx]))\n        .attr(\"r\", 6)\n        .attr(\"opacity\", 0.5)\n        .style(\"fill\", \"#b3b3b3\")\n        .style(\"stroke\", \"none\");\n\n    });\n\n    d3.range(d.SR.length).forEach(function(xx, i) {\n      if (d.Won[xx]==\"No\") {\n        sideCirclesGroupTop.append('circle')\n          .attr(\"class\", \"innings_points\")\n          // .attr('clip-path', 'url(#border)')\n          .attr(\"pointer-events\", \"none\")\n          .attr(\"cx\", xSide(d.SR[xx]))\n          .attr(\"cy\", ySide(d.Balls[xx]))\n          .attr(\"r\", 2)\n          .style(\"fill\", \"#FF6B6C\")\n          .style(\"stroke\", \"#000000\")\n          .style(\"stroke-width\", 1);\n      }\n\n      if (d.Won[xx]==\"Yes\") {\n        sideCirclesGroupBottom.append('circle')\n          .attr(\"class\", \"innings_points\")\n          // .attr('clip-path', 'url(#border)')\n          .attr(\"pointer-events\", \"none\")\n          .attr(\"cx\", xSide(d.SR[xx]))\n          .attr(\"cy\", ySide(d.Balls[xx]))\n          .attr(\"r\", 2)\n          .style(\"fill\", \"#B4BA39\")\n          .style(\"stroke\", \"#000000\")\n          .style(\"stroke-width\", 1);\n      }\n    });\n  }\n\n  // Function to handle mouse leaving\n  function mouseLeave(event, d) {\n\n    sideAxisGroupTop.attr(\"visibility\", \"hidden\")\n    sideAxisGroupBottom.attr(\"visibility\", \"hidden\")\n    sideCirclesGroupTop.selectAll(\".innings_points\").remove()\n    sideCirclesGroupBottom.selectAll(\".innings_points\").remove()\n    g.select(\"#loss_win\").remove()\n    hoverElementsGroup.select(\"#loss_sr_circle\").remove()\n    hoverElementsGroup.select(\"#win_sr_circle\").remove()\n    hoverElementsGroup.select(\"#loss_label\").remove()\n    hoverElementsGroup.select(\"#win_label\").remove()\n    hoverElementsGroup.select(\"#av_label\").remove()\n    hoverElementsGroup.selectAll(\".hover_eqr_lines\").remove()\n    hoverElementsGroup.selectAll(\".innings_points\").remove()\n    g.selectAll(\".highlighted_labels\").remove()\n    g.selectAll(\".loss_runs\").remove()\n    g.selectAll(\".main_eqr_lines\")\n        .attr(\"visibility\", \"visible\");\n    g.selectAll(\".main_eqr_run_labels\")\n        .attr(\"visibility\", \"visible\");\n\n    baseCirclesGroup.selectAll('circle')\n      .attr(\"stroke\", d => highlighted.get(d)? \"none\" : \"black\")\n      .attr(\"opacity\", d => highlighted.get(d)? 0.5 : 1)\n      .attr(\"fill\", d =>  battingPositionColor(d.BattingPosition));\n\n    baseCirclesGroup.selectAll('circle')  //here's how you get all the nodes\n      .each(function(d) {\n        if (!highlighted.get(d)) {\n          g.append('text')\n          .attr('class', 'highlighted_labels')\n          .style('fill', greyTextColor)\n          .attr(\"font-family\", \"roboto\")\n          .attr(\"font-size\", 15)\n          .attr(\"font-weight\", \"bold\")\n          .attr(\"dominant-baseline\", \"alphabetical\")\n          .attr(\"text-anchor\", \"start\")\n          .attr(\"x\", x(d.AvSR)+baseRadius+1)\n          .attr(\"y\", y(d.AvBalls)-baseRadius-1)\n          .text(d.Name);\n        }\n      });\n\n    // reset the size of the circle\n    d3.select(this)\n      .attr(\"r\", d => highlighted.get(d)? baseRadius : baseRadius * 1.5)\n      .attr(\"stroke\", d => highlighted.get(d)? \"none\" : \"black\")\n      .attr(\"opacity\", d => highlighted.get(d)? 0.5 : 1);\n    \n    tooltip.selectAll(\"text\").remove()\n    \n    // make the tooltip invisible\n    tooltip\n        .attr(\"visibility\", \"hidden\");\n  }\n\n  // Function to handle mouse clicks\n  function clicked(event, d) {\n\n    const isHighlighted = highlighted.get(d);\n\n    d3.select(this)\n        .raise()\n        .attr(\"stroke\", d => isHighlighted? \"black\" : \"none\")\n        .attr(\"opacity\", d => isHighlighted? 1 : 0.75);\n\n    d3.select(this)\n        .append(\"text\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", 22)\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"dominant-baseline\", \"hanging\")\n        .text(d.Wins);\n        \n    highlighted.set(d, !isHighlighted);\n    \n  }\n\n  // Draw legend\n  const xShift = visWidth + margin.left\n  const yShift = margin.top - 10\n  const legend = svg.append('g')\n      .attr('transform', `translate(${xShift}, ${yShift})`);\n  \n  legend.append(\"text\")\n    .text(\"Select type:\")\n    .attr('font-size', 15)\n    .attr('dominant-baseline', 'middle')\n    .attr(\"fill\", textColor)\n    .attr('text-anchor', 'start')\n    .attr('font-family', 'roboto')\n    .attr('x', 10)\n    .attr('y', 5);\n\n  const rows = legend.selectAll('g')\n    .data(BattingPositions)\n    .join('g')\n      .attr('transform', (d, i) => `translate(20, ${(i+1) * 20})`);\n  \n  rows.append('rect')\n      .attr('width', 15)\n      .attr('height', 15)\n      .attr('stroke-width', 2)\n      .attr('stroke', d => battingPositionColor(d))\n      .attr('fill', d => battingPositionColor(d))\n      .on('click', onclick);\n  \n  rows.append('text')\n      .attr('font-size', 15)\n      .attr('x', 20)\n      .attr('y', 7.5)\n      .attr(\"fill\", textColor)\n      .attr('font-family', 'roboto')\n      .attr('dominant-baseline', 'middle')\n      .text(d => d)\n\n  // Track which batting-positions are selected\n  const selected = new Map(BattingPositions.map(d => [d, true]));\n\n  function onclick(event, d) {\n    const isSelected = selected.get(d);\n    \n    // select the square and toggle it\n    const square = d3.select(this);\n    square.attr('fill', d => isSelected ? 'white' : battingPositionColor(d));\n    selected.set(d, !isSelected);\n    \n    // redraw the points\n    svg.select(\"#mean_balls\").remove()\n    svg.select(\"#mean_sr\").remove()\n    g.selectAll(\".highlighted_labels\").remove()\n    drawPoints(data.filter(d => selected.get(d.BattingPosition)));\n\n    baseCirclesGroup.selectAll('circle')  //here's how you get all the nodes\n      .each(function(d) {\n        if (!highlighted.get(d)) {\n          g.append('text')\n            .attr('class', 'highlighted_labels')\n            .style('fill', greyTextColor)\n            .attr(\"font-family\", \"roboto\")\n            .attr(\"font-size\", 15)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"dominant-baseline\", \"alphabetical\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"x\", x(d.AvSR)+baseRadius+1)\n            .attr(\"y\", y(d.AvBalls)-baseRadius-1)\n            .text(d.Name);\n            //.call(drag);\n            //.call(d3.drag().on(\"start\", dragstarted))\n            //.call(d3.drag().on(\"drag\", dragged))\n            //.call(d3.drag().on(\"end\", dragended));\n        }\n      });\n\n    baseCirclesGroup.selectAll('circle')\n      .attr(\"stroke\", d => highlighted.get(d)? \"none\" : \"black\")\n      .attr(\"r\", d => highlighted.get(d)? baseRadius : baseRadius * 1.5)\n      .attr(\"opacity\", d => highlighted.get(d)? 0.25 : 1)\n      .attr(\"fill\", d =>  battingPositionColor(d.BattingPosition));\n\n  }\n\n  return svg.node();\n}\n\n\n\n\n\n\n\nBelow is an interactive plot of how different batters did (strike-rates and balls faced) in their IPL innings when their team won and lost, compared to the overall distribution of how batters do in general.\n\n// [\"V Kohli\", \"AB de Villiers\", \"MS Dhoni\"]\nviewof chosen_batter = Inputs.select(all_batter_names, {value: 'V Kohli', label: 'Choose batter'})\n\n\n\n\n\n\n\n\n{\n  // Setting up the overall chart dimensions\n  const margin = ({top: 5, right: 65, bottom: 50, left: 60})\n  const visWidth = 600\n  const visHeight = 400\n\n  var textColor = d3.select(\"p\").style(\"color\")\n  const greyTextColor = \"#212529\"\n\n  var all_SR = []\n  var all_balls = []\n  d3.range(data.length).forEach(function(xx, i) {\n    all_SR = d3.merge([all_SR, data[xx].SR])\n    all_balls = d3.merge([all_balls, data[xx].Balls]) \n  });\n  const minSR = d3.min(all_SR)\n  const maxSR = d3.quantile(all_SR, 0.99)\n  const minBalls = d3.min(all_balls)\n  const maxBalls = d3.max(all_balls)\n  const dx = 10\n  const dy = 4\n\n  const xScale = d3.scaleLinear()\n          .domain([minSR-dx/2, maxSR+dx/2])\n          .range([0, visWidth]);\n\n  // Linear y-scale, domain and range set\n  const yScale = d3.scaleLinear()\n        .domain([minBalls-dy/2, maxBalls+dy/2])\n        .range([visHeight, 0]);\n\n  // Creating the x-axis and the y-axis, and their labels\n  \n  // Creating the x-axis\n  const xAxis = (g, scale, label) =>\n    g.attr(\"transform\", `translate(0, ${visHeight})`)\n        // add axis\n        .call(d3.axisBottom(scale))\n      // add label\n      .append(\"text\")\n        .attr(\"x\", visWidth / 2)\n        .attr(\"y\", margin.bottom-5)\n        .attr(\"fill\", textColor)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", \"18\")\n        .text(label)\n\n  // Creating the y-axis\n  const yAxis = (g, scale, label) => \n    // add axis\n    g.call(d3.axisLeft(scale))\n      // add label\n      .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"x\", -visHeight/2)\n        .attr(\"y\", -margin.left+20)\n        .attr(\"fill\", textColor)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", \"18\")\n        .text(label)\n\n  // Creating the svg inside the visualization margins of the chart: this is where things can be drawn\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", visWidth + margin.left + margin.right)\n      .attr(\"height\", visHeight + margin.top + margin.bottom);\n\n  // Creating a main group to add things to visualize\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n  // Attach axes to the main group\n  g.append(\"g\").call(xAxis, xScale, \"Strike-rate in each innings →\");\n  g.append(\"g\").call(yAxis, yScale, \"No. of balls faced in each innings →\");\n\n  // Change axes tick label fontsize\n  g.selectAll(\".tick text\")\n    .attr(\"font-size\", 15)\n    .attr(\"font-family\", \"roboto\")\n\n  g.append('rect')\n      .attr('width', visWidth)\n      .attr('height', visHeight)\n      .attr(\"stroke\", \"#000000\")\n      .style(\"stroke-width\", 1)\n      .attr('fill', 'none');\n\n  // Drawing grid lines\n  const grid = g.append('g');\n\n  grid.append('rect')\n    .attr('width', visWidth)\n    .attr('height', visHeight)\n    .attr('fill', 'white');\n\n  let yLines = grid.append('g')\n    .selectAll('line');\n\n  let xLines = grid.append('g')\n    .selectAll('line');\n\n  function drawGridLines(x, y) {\n    yLines = yLines.data(y.ticks())\n      .join('line')\n        .attr('stroke', '#d3d3d3')\n        .attr('x1', 0)\n        .attr('x2', visWidth)\n        .attr('y1', d => 0.5 + y(d))\n        .attr('y2', d => 0.5 + y(d));\n\n    xLines = xLines.data(x.ticks())\n      .join('line')\n        .attr('stroke', '#d3d3d3')\n        .attr('x1', d => 0.5 + x(d))\n        .attr('x2', d => 0.5 + x(d))\n        .attr('y1', d => 0)\n        .attr('y2', d => visHeight);\n  }\n\n  // Allows to re-draw grid lines whenever necessary: like zooming in or updating the domains of the x and y axes\n  // drawGridLines(xScale, yScale);\n\n  // Setting up a clipPath to hide data points outside of the visualization area \n  g.append('clipPath')\n      .attr('id', 'border2')\n    .append('rect')\n      .attr('width', visWidth)\n      .attr('height', visHeight);\n\n  // Setting up a group containing the base scatter points\n  const baseCirclesGroup = g.append('g')\n      .attr('clip-path', 'url(#border2)');\n\n  // Creating a tooltip that is hidden by default\n  const tooltip = svg.append(\"g\")\n      .attr(\"id\", \"tp\")\n      .attr(\"visibility\", \"hidden\");\n\n  // Setting up some values before starting to plot\n  const baseRadius = 8\n\n  function rectBinner(xData, yData, dx, dy) {\n    const xMin = d3.min(xData)\n    const xMax = d3.max(xData)\n    const yMin = d3.min(yData)\n    const yMax = d3.max(yData)\n    const nx = Math.round((xMax-xMin)/dx) + 1\n    const ny = Math.round((yMax-yMin)/dy) + 1\n    var RectCount = []\n    let x = xMin - dx/2\n    let y = yMin - dy/2\n    d3.range(nx*ny*2).forEach( function(xx, i) {\n      if (y>yMax) {\n        return RectCount\n      }\n      if (x>xMax) {\n        x = xMin - dx/2;\n        y = y + dy;\n      } else {\n        // Do something\n        var count = 0\n        d3.range(xData.length).forEach(function(xx, i) {\n          if (xData[xx]>=x && xData[xx]<(x+dx) && yData[xx]>=y && yData[xx]<(y+dy)){\n            count = count + 1\n          }\n        });\n        if (count>0) {\n          RectCount.push({\"x\": x, \"y\": y, \"c\": Math.log10(count)});\n        }\n        x = x + dx;\n      }\n    });\n    return RectCount\n  }\n\n  var inningsColor = []\n  d3.range(data.length).forEach(function(xx, i) {\n      if (data[xx].Name==chosen_batter) {\n        d3.range(data.length).forEach(function(yy, j) {\n          if (data[xx].Won[yy]==\"Yes\"){\n            inningsColor.push(\"#B4BA39\");\n          } else {\n            inningsColor.push(\"#FF6B6C\");\n          }\n        });\n      }\n  });\n\n  function drawPoints(in_data) {\n    // Select all circles in the group and append a data point to each\n\n    var rectCounts = rectBinner(in_data[0], in_data[1], dx, dy)\n    const color = d3.scaleSequential(d3.interpolateGreys)\n        .domain([0, d3.max(rectCounts, d => d.c) / 2]);\n\n    baseCirclesGroup.append(\"g\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-opacity\", 0.2)\n    .selectAll(\"rect\")\n    .data(rectCounts)\n    .join(\"rect\")\n      // .attr(\"transform\", d => `translate(${d.x},${d.y})`)\n      .attr('x', d => xScale(d.x))\n      .attr('y', d => yScale(d.y))\n      .attr('width', xScale(dx)-xScale(0))\n      .attr('height', yScale(0)-yScale(dy))\n      .attr(\"fill\", d => color(d.c))\n      .attr(\"opacity\", 0.75);\n\n    d3.range(data.length).forEach(function(xx, i) {\n      if (data[xx].Name==chosen_batter) {\n        d3.range(data.length).forEach(function(yy, j) {\n          baseCirclesGroup\n            .append('circle')\n            .attr(\"class\", \"innings_circles\")\n            .attr(\"cx\", xScale(data[xx].SR[yy]+(d3.randomUniform(1)()-1)/2))\n            .attr(\"cy\", yScale(data[xx].Balls[yy]+(d3.randomUniform(1)()-1)/2))\n            .attr(\"fill\", data[xx].Won[yy]==\"Yes\"? \"#B4BA39\": \"#FF6B6C\")\n            .attr(\"r\", 4)\n            .attr('stroke', \"#ffffff\")\n            .attr('stroke-width', 1)\n            .attr('opacity', 0.75)\n            // Interactive functions:\n            .on(\"mouseenter\", function(e){\n              mouseEnter(e, yy)\n            })\n            .on(\"mouseleave\", function(e){\n              mouseLeave(e, yy)\n            });\n            // .on(\"click\", clicked);\n        });\n         \n      }\n    });\n  }\n\n  // Function to draw equi-run lines, given an array of runs\n  var line = d3.line()\n  var SR_linspace\n  function drawEquiRunLines(eqrs) {\n    SR_linspace = d3.ticks(xScale.domain()[0], xScale.domain()[1], 1000);    \n    var balls_eqr\n    var eqr_points\n    // Equi-run lines\n    for (let j = 0; j < eqrs.length; j++) { \n      balls_eqr = new Array();\n      eqr_points = new Array();\n      for (let i = 0; i < SR_linspace.length; i++) { \n        balls_eqr.push(eqrs[j]*100/SR_linspace[i]);\n        if (balls_eqr[i]>=yScale.domain()[0] && balls_eqr[i]<=yScale.domain()[1]) {\n          eqr_points.push([xScale(SR_linspace[i]), yScale(balls_eqr[i])]);\n        }\n        \n      }\n\n      g.append('path')\n        .attr(\"class\", \"main_eqr_lines\")\n        .attr('d', line(eqr_points))\n        .attr('stroke', '#a3a3a3')\n        .style(\"stroke-dasharray\", (\"10,3\"))\n        .attr('fill', 'none');\n\n      // Labeling the equi-run lines on the right-side of the plot\n      g.append(\"text\")\n        .attr(\"class\", \"main_eqr_run_labels\")\n        .attr(\"dx\", \"0.5em\")\n        .attr(\"font-family\", \"roboto\")\n        .attr(\"font-size\", 15)\n        .attr(\"fill\", textColor)\n        .attr(\"y\", yScale(eqrs[j]*100/(xScale.domain()[1]))) // offset it from the edge of the rectangle\n        .attr(\"x\", xScale(xScale.domain()[1])) // offset it from the edge of the rectangle\n        .attr(\"dominant-baseline\", \"middle\")\n        .text(d3.format(\".0f\")(eqrs[j])+\" runs\");\n    }\n  }\n\n  // Calling function to draw equi-run lines\n  drawEquiRunLines([10, 20, 30, 40, 50, 60, 75, 100])\n\n  drawPoints([all_SR, all_balls], chosen_batter);\n\n  function getFirstLetters(str) {\n    const firstLetters = str\n      .split(' ')\n      .map(word => word[0])\n      .join('');\n\n    return firstLetters;\n  }\n\n  function mouseEnter(event, yy) {\n    \n    // Change opacity of all scatter points on hover\n    baseCirclesGroup.selectAll('circle')\n      .attr(\"stroke\", \"none\")\n      .attr(\"opacity\", 0.75)\n      .attr(\"fill\", \"#d3d3d3\");\n\n    tooltip.select(\"#tp\")\n      .raise();\n\n    const xPos = 0.8*xScale(xScale.domain()[1])\n    const yPos = 0.1*yScale(yScale.domain()[0])\n    tooltip\n      .attr(\"transform\", `translate(${xPos},${yPos})`)\n      .attr(\"visibility\", \"visible\");\n\n    d3.range(data.length).forEach(function(xx, i) {\n      if (data[xx].Name==chosen_batter) {\n        tooltip.append(\"text\")\n          .attr(\"dy\", \"0em\")\n          .attr(\"font-family\", \"roboto\")\n          .attr(\"font-size\", 20)\n          .attr(\"fill\", greyTextColor)\n          .attr(\"font-weight\", \"bold\")\n          .attr(\"dominant-baseline\", \"hanging\")\n          .text(data[xx].Name);\n\n        tooltip.append(\"text\")\n          .attr(\"dy\", \"1.1em\") // you can vary how far apart it shows up\n          .attr(\"font-family\", \"roboto\")\n          .attr(\"font-size\", 18)\n          .attr(\"fill\", greyTextColor)\n          .attr(\"dominant-baseline\", \"hanging\")\n          .text(data[xx].Runs[yy]+\" (\"+data[xx].Balls[yy]+\")\");\n\n        tooltip.append(\"text\")\n          .attr(\"dy\", \"2.6em\") // you can vary how far apart it shows up\n          .attr(\"font-family\", \"roboto\")\n          .attr(\"font-size\", 15)\n          .attr(\"fill\", greyTextColor)\n          .attr(\"dominant-baseline\", \"hanging\")\n          .text(getFirstLetters(data[xx].Team[yy])+\" vs \"+getFirstLetters(data[xx].OppTeam[yy])+\" (\"+data[xx].TeamType[yy]+\")\");\n        \n        tooltip.append(\"text\")\n          .attr(\"dy\", \"3.7em\") // you can vary how far apart it shows up\n          .attr(\"font-family\", \"roboto\")\n          .attr(\"font-size\", 15)\n          .attr(\"fill\", greyTextColor)\n          .attr(\"dominant-baseline\", \"hanging\")\n          .text(data[xx].Date[yy]);\n\n        event.target.r.baseVal.value = 12\n        event.target.style.opacity = 1\n        event.target.style.fill = data[xx].Won[yy]==\"Yes\"? \"#B4BA39\": \"#FF6B6C\"\n         event.target.style.stroke = \"#ffffff\"\n      }\n    });\n  }\n\n  function mouseLeave(event) {\n    tooltip.attr(\"visibility\", \"hidden\");\n    tooltip.selectAll(\"text\").remove()\n    baseCirclesGroup.selectAll(\".innings_circles\").remove()\n    d3.range(data.length).forEach(function(xx, i) {\n      if (data[xx].Name==chosen_batter) {\n        d3.range(data.length).forEach(function(yy, j) {\n          baseCirclesGroup\n            .append('circle')\n            .attr(\"class\", \"innings_circles\")\n            .attr(\"cx\", xScale(data[xx].SR[yy]+(d3.randomUniform(1)()-1)/2))\n            .attr(\"cy\", yScale(data[xx].Balls[yy]+(d3.randomUniform(1)()-1)/2))\n            .attr(\"fill\", data[xx].Won[yy]==\"Yes\"? \"#B4BA39\": \"#FF6B6C\")\n            .attr(\"r\", 4)\n            .attr('stroke', \"#ffffff\")\n            .attr('stroke-width', 1)\n            .attr('opacity', 0.75)\n            // Interactive functions:\n            .on(\"mouseenter\", function(e){\n              mouseEnter(e, yy)\n            })\n            .on(\"mouseleave\", function(e){\n              mouseLeave(e, yy)\n            });\n        });\n         \n      }\n    });\n\n  }\n  return svg.node();\n}"
  },
  {
    "objectID": "projects/cricket_analytics/drs_umpire_bias/drs_umpire_bias.html",
    "href": "projects/cricket_analytics/drs_umpire_bias/drs_umpire_bias.html",
    "title": "What does DRS reveal about umpire bias?",
    "section": "",
    "text": "What can DRS reveal to us about umpire biases? Is the null expectation that the fraction of “Umpire’s Call”s similar across teams for each umpire? Do some umpires have more “Umpire’s Call”s than others?\nApproach: Devise a framework to understand this, scrape ball-by-ball commentary from Cricinfo and other websites, do an NLP analysis and build a dataset to answer such questions."
  },
  {
    "objectID": "projects/board_games/board_games.html",
    "href": "projects/board_games/board_games.html",
    "title": "Board game design",
    "section": "",
    "text": "A legacy cat game in which players play as cats and compete (and sometimes cooperate) to maximize the well-being of the cats."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Batter strategies and their impacts in the IPL\n\n\n\nData science\n\n\nCricket\n\n\nIn-progress\n\n\n\nSpend time or hit out? How have different strategies affected teams’ winning chances?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nHow affordable are cars with 6+ airbags?\n\n\n\nData science\n\n\nIndia\n\n\nFinished\n\n\n\nAn analysis of new and used cars available in the market.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nHow far is healthcare in (rural) India?\n\n\n\nData science\n\n\nIndia\n\n\nIdeation\n\n\n\nExplore various aspects of health and healthcare system in India.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nIndian movies and gender inequality\n\n\n\nData science\n\n\nIndia\n\n\nIn-progress\n\n\n\nExplore various aspects of movies like actor-actress age gaps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIs Vienna’s public transport really the best?\n\n\n\nData science\n\n\nVienna\n\n\nIdeation\n\n\n\nEvaluating Vienna’s public transport and comparisons with other cities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nMaking sense of India’s cattle through numbers\n\n\n\nData science\n\n\nIndia\n\n\nIn-progress\n\n\n\nUse various data on cattle census, milk and meat production and herd models to depict possible lives of individual animals.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nVisualizing climate change and resilience\n\n\n\nData science\n\n\nClimate change\n\n\nTodo\n\n\n\nDemocratizing complex insights.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nWhat are the MPs asking and answering?\n\n\n\nData science\n\n\nIndia\n\n\nIn-progress\n\n\n\nUsing NLP techniques, uncover patterns behind the questions and answers in the Question Hour of the Lok Sabha and Rajya Sabha sessions in India.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nWhat does DRS reveal about umpire bias?\n\n\n\nData science\n\n\nCricket\n\n\nIdeation\n\n\n\nUsing DRS data to uncover biases in umpires.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat happens after a concert?\n\n\n\nVisualizations\n\n\nIdeation\n\n\n\nVisualization of concert-goers’ movements after a concert.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi! I’m  Roshan Prizak!",
    "section": "",
    "text": "I enjoy problem-solving, finding connections between seemingly unrelated ideas, explaining complex ideas by “distilling” them down into simpler ones, and figuring out quantitative approaches to tackle questions that, on first look, seem to evade quantification.\n\nMore ..\n\n\nIdeas and projects\nIf you want to quickly check out my ideas and projects on the following themes, check out:\ndata science | cricket | the india project | the vienna project | visualizations | languages\n\n\nBlog\nIf you want to check out some shorter articles and writings, go here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Roshan Prizak",
    "section": "",
    "text": "I enjoy problem-solving, finding connections between seemingly unrelated ideas, explaining complex ideas by “distilling” them down into simpler ones, and figuring out quantitative approaches to tackle questions that, on first look, seem to evade quantification.\nSince getting a bachelor’s degree and a master’s degree in Electrical Engineering from the Indian Institute of Technology Bombay, I’ve obtained a PhD from Institute of Science and Technology Austria in biophysics and evolutionary biology, and I’m currently working as a postdoctoral scientist in biophysics and molecular biology at the Karlsruhe Institute of Technology. I use a lot of data analysis, data modeling and physical modeling in my current postdoc role.\nI’m interested in thinking about complex systems. I’m enthusiastic about data science, languages and policy research, and I would like to work at an intersection of these fields. I’m currently working on various data science projects. Oh, and I would also like to design some board games!"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "**Roshan** Prizak",
    "section": "",
    "text": "Welcome!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2022\n\n\nRoshan Prizak\n\n\n\n\n\n\nNo matching items"
  }
]